{"version":3,"sources":["composants/Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["words","alphabet","Game","useState","tryLeft","setTryLeft","Math","floor","random","length","currentWord","setCurrentWord","foundLetters","setFoundLetters","gameFinished","setGameFinished","gameMessage","setGameMessage","useEffect","Set","toUpperCase","split","filter","w","className","onClick","includes","map","l","i","item","letter","a","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAEMA,EAAQ,CAAC,SAAU,WAAY,QAAS,gBAAiB,OAAQ,SAAU,SAAU,SAAU,OAAQ,YAAa,aAAc,UAAW,SAAU,UAAW,aAAa,cAAc,cAAc,YAAO,QAClNC,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAsFhIC,MAnFf,WAEI,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,mBAASH,EAAMM,KAAKC,MAAOD,KAAKE,SAAYR,EAAMS,UAAxF,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwCR,mBAAS,IAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAAwCV,mBAAS,IAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KACA,EAAsCZ,mBAAS,IAA/C,mBAAOa,EAAP,KAAoBC,EAApB,KA2CA,OAhCAC,qBAAU,WACFd,EAAU,GACVW,EAAgB,WAErB,CAACX,IAEJc,qBAAU,WACF,YAAI,IAAIC,IAAIT,EAAYU,cAAcC,MAAM,IAAIC,QAAO,SAAAC,GAAC,MAAS,KAALA,OAAYd,SAAWG,EAAaH,QAChGM,EAAgB,SAErB,CAACH,IAEJM,qBAAU,WACe,QAAjBJ,EACAG,EAAe,gCACS,UAAjBH,EACPG,EAAe,kCAEfA,MAEL,CAACH,IAaA,sBAAKU,UAAU,YAAf,UACI,iDAEA,iDAAoBpB,EAApB,WAEA,8BACI,wBAAQqB,QA/CD,WACfpB,EAAW,GACXM,EAAeX,EAAMM,KAAKC,MAAOD,KAAKE,SAAYR,EAAMS,UACxDI,EAAgB,IAChBE,EAAgB,KA2CR,4BAIJ,qBAAKS,UAAU,UAAf,SAA0BR,KAExB,CAAC,MAAO,SAASU,SAASZ,IACxB,qCACI,qBAAKU,UAAU,QAAf,SACKd,EAAYU,cAAcC,MAAM,IAAIM,KAAI,SAACC,EAAGC,GACzC,OAAIjB,EAAac,SAASE,GACf,sBAAcJ,UAAU,SAAxB,SAAkCI,GAAvBC,GAEN,KAALD,EAAW,sBAAcJ,UAAU,SAAxB,cAAWK,GAAiC,sBAAcL,UAAU,SAAxB,cAAWK,QAKrF,8BACK5B,EAAS0B,KAAI,SAACG,GAAD,OAAWlB,EAAac,SAASI,IAAU,yBAAQN,UAAU,SAASC,QAAS,kBAlC3FM,EAkC8GD,OAjC5HpB,EAAYU,cAAcM,SAASK,GACnClB,GAAgB,SAACmB,GAAD,4BAAWA,GAAX,CAAcD,OAE9B1B,EAAWD,EAAU,IAJR,IAAC2B,GAkCuD,cAAgED,EAAhE,mBCtElEG,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e06e4e4f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst words = ['london', 'chocolat', 'alyra', 'La team verte', 'Bleu', 'Orange', 'Marron', 'Violet', 'Vert', 'Moustique', 'Chinchilla', 'Moineau', 'Faisan', 'Chameau', 'Coercition','Cholesterol','Appartement','Sœur','Bord'];\nconst alphabet = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\n\nfunction Game() {\n    // Déclare une nouvelle variable d'état, qu’on va appeler « count »\n    const [tryLeft, setTryLeft] = useState(7);\n    const [currentWord, setCurrentWord] = useState(words[Math.floor((Math.random() * (words.length)))]);\n    const [foundLetters, setFoundLetters] = useState([]);\n    const [gameFinished, setGameFinished] = useState('');\n    const [gameMessage, setGameMessage] = useState('');\n\n\n    const reloadGame = () => {\n        setTryLeft(7);\n        setCurrentWord(words[Math.floor((Math.random() * (words.length)))])\n        setFoundLetters([])\n        setGameFinished('')\n    }\n\n\n    useEffect(() => {\n        if (tryLeft < 1) {\n            setGameFinished('loose')\n        }\n    }, [tryLeft])\n\n    useEffect(() => {\n        if ([...new Set(currentWord.toUpperCase().split(\"\").filter(w => w != ' '))].length === foundLetters.length) {\n            setGameFinished('win')\n        }\n    }, [foundLetters])\n\n    useEffect(() => {\n        if (gameFinished === 'win') {\n            setGameMessage('BRAVO ! Vous avez gagné !')\n        } else if (gameFinished === 'loose') {\n            setGameMessage('PERDU! Retentez votre chance !')\n        } else {\n            setGameMessage()\n        }\n    }, [gameFinished])\n\n\n\n    const verifyLetter = (letter) => {\n        if (currentWord.toUpperCase().includes(letter)) {\n            setFoundLetters((a) => [...a, letter]);\n        } else {\n            setTryLeft(tryLeft - 1)\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <h1>Le jeu du pendu</h1>\n\n            <p>Essais restants {tryLeft} fois</p>\n\n            <div>\n                <button onClick={reloadGame}> Reload game</button>\n\n            </div>\n\n            <div className=\"message\">{gameMessage}</div>\n\n            {!['win', 'loose'].includes(gameFinished) &&\n                <>\n                    <div className=\"guess\">\n                        {currentWord.toUpperCase().split(\"\").map((l, i) => {\n                            if (foundLetters.includes(l)) {\n                                return <span key={i} className=\"letter\">{l}</span>\n                            } else {\n                                return l == ' ' ? <span key={i} className=\"letter\"> </span> : <span key={i} className=\"letter\">_</span>\n                            }\n                        })}\n                    </div>\n\n                    <div>\n                        {alphabet.map((item) => !foundLetters.includes(item) && (<button className=\"button\" onClick={() => verifyLetter(item)}> {item} </button>))}\n                    </div>\n                </>\n            }\n        </div>\n    );\n}\n\nexport default Game;","import './App.css';\nimport Game from './composants/Game';\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}